#!/bin/bash

DEFAULT_AUTH_FILE=$HOME/.ssh/uni_pass
AUTH_FILE="${1:-$DEFAULT_AUTH_FILE}"

function mount_fs {
  if [ "$#" -lt 2 ]; then
    echo "Usage: <remote_mount> <local_mount>"

    exit 1
  fi

  local remote_mount="$1"
  local local_mount="$2"

  # Handle OSX compatibility
  local defer_permissions=""
  local allow_other=""
  # defer_permissions helps with OSX compat, & is only 
  # accepted as sshfs command on OSX
  if [[ "$(uname -s)" == "Darwin" ]]; then
    echo "running osx"
    defer_permissions="-o defer_permissions"
    allow_other="-o allow_other"
  fi

  local sshfs_general_opts="-o reconnect,ServerAliveInterval=15,ServerAliveCountMax=3"

  sshfs "$remote_mount" "$local_mount" \
    $sshfs_general_opts \
    $defer_permissions \
    $allow_other
}


function check_setup_correct {

  local AUTH_FILE="${1:-$DEFAULT_AUTH_FILE}"

  local AUTH_FILE_ERROR=1
  local BINARY_NOT_FOUND_ERROR=2
  local CONTROL_PATH_FAILED_ERROR=3
  
  local required_binaries=(sshpass sshfs)
  local required_bin=""

  local IS_MISSING_BINARY=false
  for required_bin in ${required_binaries[@]}; do
    if ! which "${required_bin}" >/dev/null; then

      echo "$required_bin not found on PATH"
      echo "$required_bin is required, exiting"
      IS_MISSING_BINARY=true
    fi
  done

  if $IS_MISSING_BINARY; then
    exit $BINARY_NOT_FOUND_ERROR 
  fi

  local AUTH_FILE_FAILED=false
  if [[ ! -f "$AUTH_FILE" ]]; then
    echo "Missing $AUTH_FILE"
    AUTH_FILE_FAILED=true
  fi

  local AUTH_FILE_PERMISSIONS=$(stat -c %a "$AUTH_FILE")

  if [[ ! $AUTH_FILE_PERMISSIONS == "600" ]]; then 
    echo "Incorrect permssions for $AUTH_FILE"
    echo "Expecting 600, got $AUTH_FILE_PERMISSIONS"
    AUTH_FILE_FAILED=true
  fi

  if $AUTH_FILE_FAILED; then
    echo "Must put ssh password in $AUTH_FILE with permissions 600"
    exit $AUTH_FILE_ERROR
  fi
    
  # Setup shared connection
  # You need to set ControlPath for the host
  local CONTROL_PATH_FAILED=false

  if ! ssh -G jump | grep -q '^controlpath'; then  
    echo "no controlpath set for bastion"
    CONTROL_PATH_FAILED=true
  fi
  if ! ssh -G jhpc | grep -q '^controlpath'; then
    echo "no controlpath set for host"
    CONTROL_PATH_FAILED=true
  fi

  if $CONTROL_PATH_FAILED; then
    echo "must set controlpath for both host & bastion in ssh config"
    exit $CONTROL_PATH_FAILED_ERROR
  fi


}

function setup_ssh_connection {
  local AUTH_FILE="${1:-$DEFAULT_AUTH_FILE}" 
  check_setup_correct "$AUTH_FILE"

  sshpass -f "$AUTH_FILE" ssh -M -fN jump 

  echo "Finished connecting to bastion"

  sleep 1

  # Background connect to jhpc before connecting with sshfs so that
  # X connection is forwarded
  ssh -M -fN jhpc
}


function mount_all_fs {
  mount_fs jhpc:/project/STEMI/ ~/work/.project/STEMI
  mount_fs jhpc:/project/ACS/ ~/work/.project/ACS
  mount_fs jhpc:/rds/PRJ-STEMI/ ~/work/.rds/PRJ-STEMI
  mount_fs jhpc:/rds/PRJ-ACS/ ~/work/.rds/PRJ-ACS
}

function entire_workflow {
  local AUTH_FILE="${1:-$DEFAULT_AUTH_FILE}" 
  setup_ssh_connection "$AUTH_FILE"
  mount_all_fs

  ssh -XYC jhpc
  echo "Finsihed ssh-ing"
}

entire_workflow "$AUTH_FILE"
