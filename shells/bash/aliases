#!/bin/env bash

# From bash_bindings/linux/bash_aliases
# Check the distro
function check_distro {
  local unameOut="$(uname -s)"
  local machine="$unameOut"
  case "${unameOut}" in
      Linux*)     machine=Linux;;
      Darwin*)    machine=Mac;;
      CYGWIN*)    machine=Cygwin;;
      MINGW*)     machine=MinGw;;
      *)          machine="UNKNOWN:${unameOut}"
  esac

  echo ${machine}
}

distro="$(check_distro)"

# If you're running osx, use treat xdg-open as alias of open
if [[ "${distro}" == "Mac" ]]; then
  alias xdg-open='open'
fi


function gui_run {
  (xdg-open $1 > /dev/null 2>&1 &)
}

alias please=sudo


####################
# SSH Helpers
####################
# ssh server helpers

alias sshlog='tail -n 1000 /var/log/auth.log | grep -E ssh'
alias check_ssh='curl https://ifconfig.co/port/22'

# ssh client helpers

HOME_DOMAIN=mstrasiotto.hopto.org
alias sshpc='ssh -CXY mstr3336@hpc.sydney.edu.au'

function sshome {
  ssh -XYC matty@${HOME_DOMAIN}
}

function get_displays {
  (cd /tmp/.X11-unix && for x in X*; do echo ":${x#X}"; done)
}


######################
# R workflow helpers

function Rproj_open {
  (xdg-open $(find . -maxdepth 1 -name "*.Rproj") > /dev/null 2>&1 &)
}
alias Rproj=Rproj_open

alias pkginst="R CMD INSTALL --no-multiarch --with-keep.source ."
alias pull_deps="Rscript --no-save --no-restore -e 'renv::restore(confirm = FALSE)'"
alias test_pkg='Rscript --no-save --no-restore -e "devtools::test()"'


function update_pkg {
  git pull
  pull_deps
  pkginst
}


# General helpers

alias mvim='qmv -f do'

alias colcat='highlight --out-format=xterm256'


#############################
# Aliases From linux/bashrc


# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"

    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'


# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

function ascend_to_root {
  local top_level="$(pwd)"

  if top_level="$(git rev-parse --show-toplevel 2>/dev/null)" ; then
    cd "$top_level"
    return 0
  else 
    echo "not in a repo"
    return 1
  fi
}

if hash aws 1>&2 2>/dev/null ; then

  function aws_list_all {
    for region in `aws ec2 describe-regions --region us-east-1 --output text | cut -f4`
    do
      echo -e "\nListing Instances in region:'$region'..."
      aws ec2 describe-instances --region $region
    done
  }

  alias aws_ls='aws_list_all'

fi


alias here='ascend_to_root'

alias @alias='alias | fzf'

alias vncinit='vncserver -rfbport 6969'

###########################################
# ls
###########################################

# Now in fish
# some more ls aliases
alias ls='ls --color=auto'
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

# lsd (LSDeluxe) is a fancier ls

# https://github.com/Peltoche/lsd
# Now in fish
if hash lsd 2>&1 >/dev/null; then
  alias ls='lsd'
  alias l='ls -l'
  alias la='ls --almost-all'
  alias lla='ls -l --almost-all'
  alias lt='ls --tree'
fi

function docker_bash_f {
  local container="$1" 
  shift
  local cmd

  if [ "$#" -eq "0" ]; then
    cmd="bash"
  else
    cmd="$1"
    shift

  fi

  sudo docker exec -it "$container" "$cmd" "$@"
}

alias docker_bash='docker_bash_f'

alias git2uni='git_migrate git@github.sydney.edu.au:speed-extract'

function table_sed {
  local pattern="$1"
  local n_extra_lines="${2:-0}"

  sed -n "1,+${n_extra_lines}p ; /.*${pattern}.*/p"
}

function docker_pgrep {
  local pattern="$1"
  sudo docker ps | table_sed "$pattern" "0"

}

function compose_pgrep {
  local pattern="$1"
  sudo docker-compose ps | table_sed "$pattern" "1"
}

alias pip='python -m pip'


# this is now recommended practise
alias pip='python -m pip'


if hash scrcpy 1>&2 2>/dev/null ; then
  function _mirror_droid_connect {
    scrcpy --stay-awake --turn-screen-off 2>&1 >>~/.scrcpy.log 
  }

  function _mirror_droid_repeat {
    while :
    do
      adb wait-for-usb-device
      _mirror_droid_connect
      sleep 0.1
    done
  }

  function mirror_droid_repeat {
    _mirror_droid_repeat &
  }

  alias phone_cast='scrcpy --turn-screen-off --stay-awake'
  
fi

alias tty-share-own='tty-share -public -tty-proxy term.straz.to:3456'


function compare_versions {
  local USAGE=$(cat << EOF
  Usage:
    ${FUNCNAME[0]} <current_version> <minimum_version>
EOF
  )
  # local current_version="$1"
  # local required_version="$2"

  if [[ "$#" -lt 2 ]]; then
    echo "Incorrect usage: Expect 2 args" 1>&2
    echo "$USAGE" 1>&2
    return 2
  fi

  printf '%s\n%s\n' "$2" "$1" | sort --check=quiet --version-sort
}
