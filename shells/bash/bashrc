# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# Profile the startup of bash
# https://stackoverflow.com/a/5015179/9238801
# export BASH_PROFILE_STARTUP="1"
if [[ ! -z "$BASH_PROFILE_STARTUP" ]]; then
  # This redirects output of -x bash trace
  # if its already set, (something else is trying to debug)
  # dont re-set it
  # This works for bash >= 4.1
  # luckily the oldest bash I use is on the HPC, and is 4.1
  if [[ -z "$BASH_XTRACEFD" ]]; then
    export BASH_PROFILE_STARTUP_LOG="$HOME/bashstart.$$.log"
    exec 5> "$BASH_PROFILE_STARTUP_LOG" 
    export BASH_XTRACEFD="5"
  fi

  export PS4='+\011 $(date "+%s.%N")\011 '
  set -x

fi

if [ "$1" != "no-recurse" ]; then
  shell_confs=( ".bash_profile" ".profile" )

  for i in "${shell_confs[@]}"
  do
    if [ -e "${HOME}/${i}" ]; then
     . "${HOME}/$i" "no-recurse"
    fi
  done
fi

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"



# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  elif [ -f "$HOME/.local/share/share/bash-completion/bash_completion" ]; then
    # Source locally installed bash completions
    . /"$HOME/.local/share/share/bash-completion/bash_completion"
  fi
fi
export GOPATH=${HOME}/go
export PATH=/usr/local/go/bin:${PATH}:${GOPATH}/bin

[[ -e "/usr/local/etc/bash_completion.d/singularity" ]] && . "/usr/localal/etc/bash_completion.d/singularity"

if [[ -e "$HOME/.config/dotfiles/git/completion.bash" ]]; then
  . "$HOME/.config/dotfiles/git/completion.bash"
fi

# Use fzf completion for any tabbed completion if possible
if [[ -e "$HOME/.config/dotfiles/fzf/fzf-tab/bash/fzf-bash-completion.sh" ]]; then
  #module unload ag
  #. "$HOME/.config/dotfiles/fzf/fzf-tab/bash/fzf-bash-completion.sh"
  #bind -x '"\t": fzf_bash_completion'
  #export LD_PRELOAD="$HOME/.config/dotfiles/fzf/fzf-tab/readline/target/release/librl_custom_complete.so"
  :
fi


#export PATH=/usr/jdk/bin:${PATH}

#export CC=clang

if [ -f ~/.bash_prompt ]; then
  . ~/.bash_prompt
fi


# If fzf exists, use it
if [ -f ~/.fzf.bash ]; then
  source ~/.fzf.bash

  _FZF_EXISTS="fzf"
fi

# This will be changed if fzf exists && we can use z.lua
# zoxide exports this alias for interactive mode
# z,sh doesn't have a decent interactive mode ( I think ), 
# so fall back to z if fzf doesn't exist or is using z.sh
alias zi='z'

# IF zoxide exists, use it
# https://github.com/ajeetdsouza/zoxide
# zoxide is the slickest z implementation
# (and fastest) - implemented in rust
# But it's a bit less portable to old envs
# eg the hpc. I install it w/ linuxbrew
if hash zoxide 2>/dev/null; then
  eval "$(zoxide init bash)"
elif [ -e ~/.config/dotfiles/z.lua/z.lua ]; then
  # https://github.com/skywind3000/z.lua
  # z.lua is faster than z.sh, and more portable
  # than zoxide. 
  # It also integrates w/ fzf
  eval "$(lua ~/.config/dotfiles/z.lua/z.lua --init bash enhanced ${_FZF_EXISTS:-})"

  if [[ ! -z ${_FZF_EXISTS+x} ]]; then 
    alias zi='z -I'
  fi
elif [ -e ~/.config/dotfiles/z.sh/z.sh ]; then
  # z.sh is the most portable z implementation
  # That i've noticed (maybe z.lua is equal)
  . ~/.config/dotfiles/z.sh/z.sh
fi

# https://github.com/wernight/powerline-web-fonts/issues/8#issuecomment-353081869
# This resolves issue with powerline fonts & tmux
if [[ -z "$LANG" ]]; then
  export LANG=en_US.UTF-8
fi

if [[ -z "$LC_CTYPE" ]]; then
  export LC_CTYPE=en_US.UTF-8
fi
#[[ -e "$HOME/.local/opt/fzf-obc/bin/fzf-obc.bash" ]] && . "$HOME/.local/opt/fzf-obc/bin/fzf-obc.bash" 


if hash ruby 2>/dev/null; then
  # Install Ruby Gems to ~/gems
  export GEM_HOME="$HOME/gems"
  export PATH="$HOME/gems/bin:$PATH"

fi

#THIS MUST BE AT THE END OF THE FILE FOR SDKMAN TO WORK!!!
export SDKMAN_DIR="/home/matty/.sdkman"
[[ -s "/home/matty/.sdkman/bin/sdkman-init.sh" ]] && source "/home/matty/.sdkman/bin/sdkman-init.sh"


export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion



# Finish profiling bashrc startup
if [[ ! -z "$BASH_PROFILE_STARTUP" ]]; then
  # Stop the trace
  set +x

  unset BASH_PROFILE_STARTUP
  echo "Profiled start up to $BASH_PROFILE_STARTUP_LOG"
fi

[[ -f ~/.config/broot/launcher/bash/br  ]] && source /home/matty/.config/broot/launcher/bash/br
[[ -f ~/.idgit.bash ]] && . ~/.idgit.bash

# Set the editor if noone else has
if [[ -z "$EDITOR" ]]; then
  if hash editor 2>/dev/null ; then
    export EDITOR=editor
  else
    export EDITOR=vi
  fi
fi
[ -f "$HOME/.cargo/env" ] && . "$HOME/.cargo/env"
