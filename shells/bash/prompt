#!/bin/env bash


# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

_truncate_path() {
  local arr
  local out
  local breadcrumbs
  local IFS="/"
  set -f # Disable glob expansion
  arr=( $@ ) # Deliberately unquoted 
  set +f
 
  local n_comps="${#arr[@]}"
  
  if (( n_comps > 5 || "${#1}" > 50 )); then
    #out="${arr[0]}/../${arr[-1]}"
    for i in "${!arr[@]}"; do
      if (( i == 0 || i+1 >= n_comps )); then
        :
      else
        breadcrumbs="$breadcrumbs/${arr[$i]:0:1}"
      fi
    done
    # -ve array indices only added in bash 4.2, hpc has 4.1 :(
    # https://github.com/bminor/bash/blob/36f2c40/CHANGES#L3034-L3035
    
    out="${arr[0]}${breadcrumbs}/${arr[${#arr[@]}-1]}"
    else
      out="$1"
  fi
  
  echo "$out"
}

_decode_unicode_escapes() {
  printf '%s' "$*" | perl -CS -pe 's/(\\u([0-9A-Fa-f]{1,4})|\\U([0-9A-Fa-f]{1,8}))/chr(hex($2.$3))/eg' 2>/dev/null
}

_handle_path() {
  local out="$1"
   
  local _ss='\uE0B1'   #   you only need fonts patched with
  # sub in ~
  [[ "$out" =~ ^"$HOME"(/|$) ]] && out="~${out#$HOME}"
  
  out="$(_truncate_path "$out")"

  out="${out//\//${_ss}}"
  _decode_unicode_escapes "$out"
}



_get_ps1() {
  
  ########################################
  # Personal, loving prompt
  # 
  # Red was "\[\033[01;31m\]" for bright, but looked bad
  
  # red: #d70000
  # new ansi escape
  local r_fg="\[\033[38;2;215;000;000m\]"
  local r_bg="\[\033[48;2;215;000;000m\]"
  # Old ansi escape
  #local r_fg="\[\033[31m\]"
  #local r_bg="\[\033[41m\]"
  
  # white: #e4e4e4 

  local w_fg="\[\033[38;2;228;228;228m\]"
  local w_bg="\[\033[48;2;228;228;228m\]"
  # old ansi escape
  #local w_bg="\[\033[47m\]"
  #local w_fg="\[\033[37m\]"

  local b_bg="\[\033[40m\]"
  local b_fg="\[\033[30m\]"

  local y_fg="\[\033[38;2;255;255;00m\]"
  local y_bg="\[\033[48;2;255;255;00m\]"
 
  local p_fg="\[\033[38;2;255;000;175m\]"
  local p_bg="\[\033[48;2;255;000;175m\]"
  
  local col_off="\[\033[01;00m\]"

  local bold="\[\033[01m\]"
  local unbold="\[\033[22m\]"
  
  local _ms='\uE0B0'  # /!\ you don't need to install Powerline
  local _ss='\uE0B1'   #   you only need fonts patched with
  
  local cwd='$(_handle_path "$(pwd)")'
  
  local py="$p_fg$y_bg"
  local yp="$y_fg$p_bg"

  local rw="$r_fg$w_bg"
  local wr="$w_fg$r_bg"
  local wb="$w_fg$b_bg"
  local bw="$b_fg$r_fg"
  local yb="$y_fg$b_bg"
  local by="$b_fg$y_bg"
  local out="${py} â™¥${yp}${_ms}${bold}${w_fg} ${cwd}${unbold} ${p_fg}${r_bg}${_ms}${wr}"
  out+=' \$ '
  out+="${r_fg}${b_bg}${_ms}${col_off}  "
  
  _decode_unicode_escapes "$out"
}

export PS1="$(_get_ps1)"
